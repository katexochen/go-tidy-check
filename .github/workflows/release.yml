name: Release a new version
on:
  push:
    tags:
      - "v[0-9]+\\.[0-9]+\\.[0-9]+"

jobs:
  release:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod

      - name: Run integration tests
        run: go test -v ./...
        env:
          INTEGRATION_TEST: "true"

      - name: Set RELEASE_VERSION ENV var
        run: echo "RELEASE_VERSION=${GITHUB_REF:10}" >> $GITHUB_ENV

      - name: Ensure container version is updated to release version
        run: |
          image=$(yq '.runs.image' action.yml)
          echo "Image: $image"
          imageVer=${image:(-6)}
          echo "Image version: $imageVer, Release version: ${{ env.RELEASE_VERSION }}"
          [[ "$imageVer" == "${{ env.RELEASE_VERSION }}" ]]

      - name: Install gox
        run: go install github.com/mitchellh/gox@v1.0.1

      - name: Build cross-platform binaries
        env:
          PLATFORMS: darwin/amd64 darwin/arm64 windows/amd64 linux/amd64 linux/arm64
          OUTPUT_PATH_FORMAT: ./bin/${{ env.RELEASE_VERSION }}/{{.OS}}/{{.Arch}}/go-tidy-check
        run: |
          gox -osarch="${PLATFORMS}" -ldflags "-X main.Version=${RELEASE_VERSION}" -output "${OUTPUT_PATH_FORMAT}"

      - name: Test correct version injection
        run: |
          chmod +x ./bin/${{ env.RELEASE_VERSION }}/linux/amd64/go-tidy-check
          version=$(./bin/${{ env.RELEASE_VERSION }}/linux/amd64/go-tidy-check --version)
          if [ "${version}" != "go-tidy-check ${{ env.RELEASE_VERSION }}" ]; then
            echo "Version injection failed. Expected '${{ env.RELEASE_VERSION }}', got '${version}'"
            exit 1
          fi

      - name: Generate release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/{owner}/{repo}/releases/generate-notes \
            -F tag_name=${{ env.RELEASE_VERSION }} \
            > tmp-release-notes.json

      - name: Gzip the bins
        env:
          OUT_BASE: ./bin/${{ env.RELEASE_VERSION }}
        run: |
          tar -czvf "${OUT_BASE}/darwin/amd64/go-tidy-check_darwin_amd64.tar.gz" -C "${OUT_BASE}/darwin/amd64" go-tidy-check
          tar -czvf "${OUT_BASE}/darwin/arm64/go-tidy-check_darwin_arm64.tar.gz" -C "${OUT_BASE}/darwin/arm64" go-tidy-check
          tar -czvf "${OUT_BASE}/windows/amd64/go-tidy-check_windows_amd64.tar.gz" -C "${OUT_BASE}/windows/amd64" go-tidy-check.exe
          tar -czvf "${OUT_BASE}/linux/amd64/go-tidy-check_linux_amd64.tar.gz" -C "${OUT_BASE}/linux/amd64" go-tidy-check
          tar -czvf "${OUT_BASE}/linux/arm64/go-tidy-check_linux_arm64.tar.gz" -C "${OUT_BASE}/linux/arm64" go-tidy-check

      - name: Create release
        env:
          OUT_BASE: ./bin/${{ env.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          jq -r .body tmp-release-notes.json > tmp-release-notes.md
          gh release create ${{ env.RELEASE_VERSION }} \
            -t "$(jq -r .name tmp-release-notes.json)" \
            -F tmp-release-notes.md \
            "${OUT_BASE}/darwin/amd64/go-tidy-check_darwin_amd64.tar.gz#go-tidy-check_macos_amd64" \
            "${OUT_BASE}/darwin/arm64/go-tidy-check_darwin_arm64.tar.gz#go-tidy-check_macos_arm64" \
            "${OUT_BASE}/windows/amd64/go-tidy-check_windows_amd64.tar.gz#go-tidy-check_windows_amd64" \
            "${OUT_BASE}/linux/amd64/go-tidy-check_linux_amd64.tar.gz#go-tidy-check_linux_amd64" \
            "${OUT_BASE}/linux/arm64/go-tidy-check_linux_arm64.tar.gz#go-tidy-check_linux_arm64"

      - name: Update the major version tag
        id: majorver
        uses: actions/publish-action@v0.1.0
        with:
          source-tag: ${{ env.RELEASE_VERSION }}

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          build-args: |
            VERSION=${{ env.RELEASE_VERSION }}
          tags: |
            ghcr.io/katexochen/go-tidy-check:${{ env.RELEASE_VERSION }}
            ghcr.io/katexochen/go-tidy-check:${{ steps.majorver.outputs.major-tag }}
            ghcr.io/katexochen/go-tidy-check:latest
